type Account = record { owner : principal; subaccount : opt Subaccount };
type Backend = service {
  deleteUser : (text) -> (Response_1);
  getAddress : () -> (text);
  getCanisterAddress : () -> (text);
  getCanisterBalance : () -> (text);
  getFundingAddress : () -> (text);
  getFundingBalance : () -> (text);
  getInvoice : () -> (Account);
  getLogs : () -> (vec text) query;
  getTradingAddress : () -> (text);
  getTradingBalance : () -> (text);
  getUser : () -> (Response) query;
  getUsersList : () -> (vec record { text; User }) query;
  setCourierApiKey : (text) -> (Response_1);
  transactionsLength : () -> (text) query;
  transferFromCanistertoSubAccount : () -> (Result);
  transferFromSubAccountToCanister : (nat) -> (Result);
  transferFromSubAccountToSubAccount : (text, nat) -> (Result);
  updateUser : (User) -> (Response);
  userLength : () -> (text) query;
  whoami : () -> (principal);
};
type Response = record {
  status : nat16;
  data : opt User;
  status_text : text;
  error_text : opt text;
};
type Response_1 = record {
  status : nat16;
  data : opt text;
  status_text : text;
  error_text : opt text;
};
type Result = variant { ok : text; err : text };
type Subaccount = vec nat8;
type User = record {
  phone_notifications : bool;
  name : text;
  email_notifications : bool;
  created_at : int;
  email : text;
  wallet : text;
  phone : text;
};
service : Backend