type Account = record { owner : principal; subaccount : opt Subaccount };
type AccountIdentifier = variant {
  "principal" : principal;
  "blob" : vec nat8;
  "text" : text;
};
type AccountIdentifierToBlobErr = record {
  kind : variant { InvalidAccountIdentifier; Other };
  message : opt text;
};
type AccountIdentifierToBlobResult = variant {
  ok : AccountIdentifierToBlobSuccess;
  err : AccountIdentifierToBlobErr;
};
type AccountIdentifierToBlobSuccess = vec nat8;
type Backend = service {
  accountIdentifierToBlob : (AccountIdentifier) -> (
      AccountIdentifierToBlobResult,
    );
  create_employee : (CreateEmployeeArgs) -> (Response_4);
  getAddress : () -> (text);
  getCanisterAddress : () -> (text);
  getCanisterBalance : () -> (text);
  getEmployeeByPrincipal : (principal) -> (Response_4);
  getFundingAddress : () -> (text);
  getFundingBalance : () -> (text);
  getInvoice : () -> (Account);
  getLogs : () -> (vec text) query;
  getMyContacts : () -> (vec Employee);
  getMyContactsLength : () -> (text);
  getMyTransactionLength : () -> (text);
  getNotifications : () -> (vec Notification__1);
  getTradingAddress : () -> (text);
  getTradingBalance : () -> (text);
  getTransactionLength : () -> (text) query;
  getUnreadNotifications : () -> (vec Notification__1);
  getUnreadNotificationsLength : () -> (text);
  getUser : () -> (Response) query;
  getUserByPrincipal : (principal) -> (Response) query;
  getUsersList : () -> (vec record { text; User }) query;
  get_account_identifier : (GetAccountIdentifierArgs) -> (
      GetAccountIdentifierResult,
    ) query;
  get_transaction : (GetTransactionArgs) -> (GetTransactionResult) query;
  get_transactions : () -> (vec Transaction) query;
  isRegistered : () -> (bool) query;
  runpayroll : (vec PayrollType) -> (Response_3);
  save_notification : (CreateNotificationArgs) -> (CreateNotificationResult);
  save_transaction : (CreateTransactionArgs) -> (CreateTransactionResult);
  setCourierApiKey : (text) -> (Response_2);
  testRandom : () -> (opt bool);
  transferFromCanistertoSubAccount : () -> (Result);
  transferFromSubAccountToCanister : (nat) -> (Result);
  transferFromSubAccountToSubAccount : (text, nat) -> (Response_1);
  updateUser : (User) -> (Response);
  userLength : () -> (text) query;
  whoami : () -> (principal);
};
type CreateEmployeeArgs = record { wallet : text };
type CreateNotificationArgs = record {
  isRead : bool;
  sender : text;
  amount : nat;
  receiver : text;
};
type CreateNotificationErr = record {
  kind : variant { InvalidNotification; Other };
  message : opt text;
};
type CreateNotificationResult = variant {
  ok : CreateNotificationSuccess;
  err : CreateNotificationErr;
};
type CreateNotificationSuccess = record { notification : Notification };
type CreateTransactionArgs = record {
  creator : principal;
  destination : principal;
  amount : nat;
  successful : bool;
};
type CreateTransactionErr = record {
  kind : variant {
    InvalidDetails;
    InvalidAmount;
    InvalidDestination;
    MaxTransactionsReached;
    InsufficientBalance;
    InvalidSender;
    Other;
  };
  message : opt text;
};
type CreateTransactionResult = variant {
  ok : CreateTransactionSuccess;
  err : CreateTransactionErr;
};
type CreateTransactionSuccess = record { transaction : Transaction__1 };
type Employee = record {
  id : nat;
  email_address : text;
  creator : principal;
  modified_at : int;
  name : text;
  created_at : int;
  wallet : text;
  phone_number : text;
};
type GetAccountIdentifierArgs = record { "principal" : principal };
type GetAccountIdentifierErr = record { message : opt text };
type GetAccountIdentifierResult = variant {
  ok : GetAccountIdentifierSuccess;
  err : GetAccountIdentifierErr;
};
type GetAccountIdentifierSuccess = record {
  accountIdentifier : AccountIdentifier;
};
type GetTransactionArgs = record { id : nat };
type GetTransactionErr = record {
  kind : variant { NotFound; NotAuthorized; Other; InvalidTransactionId };
  message : opt text;
};
type GetTransactionResult = variant {
  ok : GetTransactionSuccess;
  err : GetTransactionErr;
};
type GetTransactionSuccess = record { transaction : Transaction__1 };
type Notification = record {
  id : nat;
  isRead : bool;
  sender : text;
  amount : nat;
  receiver : text;
};
type Notification__1 = record {
  id : nat;
  isRead : bool;
  sender : text;
  amount : nat;
  receiver : text;
};
type PayrollType = record {
  id : nat;
  creator : text;
  destination : text;
  created_at : int;
  amount : nat;
  successful : bool;
};
type Response = record {
  status : nat16;
  data : opt User;
  status_text : text;
  error_text : opt text;
};
type Response_1 = record {
  status : nat16;
  data : opt Transaction;
  status_text : text;
  error_text : opt text;
};
type Response_2 = record {
  status : nat16;
  data : opt text;
  status_text : text;
  error_text : opt text;
};
type Response_3 = record {
  status : nat16;
  data : opt vec PayrollType;
  status_text : text;
  error_text : opt text;
};
type Response_4 = record {
  status : nat16;
  data : opt Employee;
  status_text : text;
  error_text : opt text;
};
type Result = variant { ok : text; err : text };
type Subaccount = vec nat8;
type Transaction = record {
  id : nat;
  creator : principal;
  destination : principal;
  created_at : int;
  amount : nat;
  successful : bool;
};
type Transaction__1 = record {
  id : nat;
  creator : principal;
  destination : principal;
  created_at : int;
  amount : nat;
  successful : bool;
};
type User = record {
  email_address : text;
  phone_notifications : bool;
  name : text;
  email_notifications : bool;
  phone_number : text;
};
service : Backend