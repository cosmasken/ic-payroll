type User = 
 record {
   email_address: text;
   email_notifications: bool;
   first_name: text;
   is_verified: bool;
   last_name: text;
   phone_notifications: bool;
   phone_number: text;
 };
type TransformArgs = 
 record {
   context: blob;
   response: HttpResponsePayload;
 };
type Transaction__1 = 
 record {
   amount: nat;
   created_at: int;
   creator: principal;
   destination: principal;
   id: nat;
   successful: bool;
 };
type Transaction = 
 record {
   amount: nat;
   created_at: int;
   creator: principal;
   destination: principal;
   id: nat;
   successful: bool;
 };
type StreamingStrategy = variant {
                           Callback:
                            record {
                              callback: StreamingCallback;
                              token: StreamingCallbackToken;
                            };};
type StreamingCallbackToken = 
 record {
   content_encoding: text;
   index: nat;
   key: text;
 };
type StreamingCallbackResponse = 
 record {
   body: blob;
   token: opt StreamingCallbackToken;
 };
type StreamingCallback = func (StreamingCallbackToken) ->
                          (StreamingCallbackResponse) query;
type SchedulePaymentsSuccess = record {receivers: vec PayrollType;};
type SchedulePaymentsResult = 
 variant {
   err: SchedulePaymentsErr;
   ok: SchedulePaymentsSuccess;
 };
type SchedulePaymentsErr = 
 record {
   kind:
    variant {
      InsufficientBalance;
      InvalidAmount;
      InvalidDestination;
      InvalidDetails;
      InvalidSender;
      MaxTransactionsReached;
      Other;
    };
   message: opt text;
 };
type SchedulePaymentsArgs = 
 record {
   created_at: int;
   payment_at: int;
   receivers: vec PayrollType;
   status: variant {
             Accepted;
             Paid;
             Rejected;
             Unpaid;
           };
 };
type Result = 
 variant {
   err: text;
   ok: text;
 };
type Response__1 = 
 record {
   body: blob;
   headers: vec HeaderField;
   status_code: nat16;
   streaming_strategy: opt StreamingStrategy;
 };
type Response_8 = 
 record {
   data: opt Department;
   error_text: opt text;
   status: nat16;
   status_text: text;
 };
type Response_7 = 
 record {
   data: opt Designation;
   error_text: opt text;
   status: nat16;
   status_text: text;
 };
type Response_6 = 
 record {
   data: opt Emp;
   error_text: opt text;
   status: nat16;
   status_text: text;
 };
type Response_5 = 
 record {
   data: opt Organization;
   error_text: opt text;
   status: nat16;
   status_text: text;
 };
type Response_4 = 
 record {
   data: opt Payslip;
   error_text: opt text;
   status: nat16;
   status_text: text;
 };
type Response_3 = 
 record {
   data: opt User;
   error_text: opt text;
   status: nat16;
   status_text: text;
 };
type Response_2 = 
 record {
   data: opt vec PayrollType__1;
   error_text: opt text;
   status: nat16;
   status_text: text;
 };
type Response_1 = 
 record {
   data: opt text;
   error_text: opt text;
   status: nat16;
   status_text: text;
 };
type Response = 
 record {
   data: opt Transaction;
   error_text: opt text;
   status: nat16;
   status_text: text;
 };
type Request = 
 record {
   body: blob;
   headers: vec HeaderField;
   method: text;
   url: text;
 };
type Payslip = 
 record {
   gross_salary: nat;
   housing: nat;
   net_salary: nat;
   nhif_deductions: nat;
   nssf_deductions: nat;
   other_deductions: nat;
   paye: nat;
   personal_relief: nat;
   taxable_income: nat;
   total_tax: nat;
 };
type PayrollType__1 = 
 record {
   amount: nat;
   created_at: int;
   creator: text;
   destination: text;
   id: nat;
   successful: bool;
 };
type PayrollType = 
 record {
   amount: nat;
   created_at: int;
   creator: text;
   destination: text;
   id: nat;
   successful: bool;
 };
type Organization = 
 record {
   code: text;
   creator: principal;
   name: text;
 };
type Notification__1 = 
 record {
   amount: nat;
   id: nat;
   isRead: bool;
   receiver: text;
   sender: text;
 };
type Notification = 
 record {
   amount: nat;
   id: nat;
   isRead: bool;
   receiver: text;
   sender: text;
 };
type ImgId = text;
type HttpResponsePayload = 
 record {
   body: vec nat8;
   headers: vec HttpHeader;
   status: nat;
 };
type HttpHeader = 
 record {
   name: text;
   value: text;
 };
type HeaderField = 
 record {
   text;
   text;
 };
type GetTransactionSuccess = record {transaction: Transaction__1;};
type GetTransactionResult = 
 variant {
   err: GetTransactionErr;
   ok: GetTransactionSuccess;
 };
type GetTransactionErr = 
 record {
   kind: variant {
           InvalidTransactionId;
           NotAuthorized;
           NotFound;
           Other;
         };
   message: opt text;
 };
type GetTransactionArgs = record {id: nat;};
type Emp = 
 record {
   creator: principal;
   department: text;
   designation: text;
   disability: bool;
   email_address: text;
   employee_type: text;
   first_name: text;
   gender: text;
   gross_salary: nat;
   job_group: text;
   last_name: text;
   organization: text;
   phone_number: text;
   profile_image: text;
   role: text;
   username: text;
 };
type Designation = 
 record {
   code: text;
   creator: principal;
   name: text;
 };
type Department = 
 record {
   code: text;
   creator: principal;
   name: text;
 };
type CreateTransactionSuccess = record {transaction: Transaction__1;};
type CreateTransactionResult = 
 variant {
   err: CreateTransactionErr;
   ok: CreateTransactionSuccess;
 };
type CreateTransactionErr = 
 record {
   kind:
    variant {
      InsufficientBalance;
      InvalidAmount;
      InvalidDestination;
      InvalidDetails;
      InvalidSender;
      MaxTransactionsReached;
      Other;
    };
   message: opt text;
 };
type CreateTransactionArgs = 
 record {
   amount: nat;
   creator: principal;
   destination: principal;
   successful: bool;
 };
type CreateOrganizationArgs = record {name: text;};
type CreateNotificationSuccess = record {notification: Notification;};
type CreateNotificationResult = 
 variant {
   err: CreateNotificationErr;
   ok: CreateNotificationSuccess;
 };
type CreateNotificationErr = 
 record {
   kind: variant {
           InvalidNotification;
           Other;
         };
   message: opt text;
 };
type CreateNotificationArgs = 
 record {
   amount: nat;
   isRead: bool;
   receiver: text;
   sender: text;
 };
type CreateEmpArgs = 
 record {
   department: text;
   designation: text;
   disability: bool;
   email_address: text;
   employee_type: text;
   first_name: text;
   gender: text;
   gross_salary: nat;
   job_group: text;
   last_name: text;
   organization: text;
   phone_number: text;
   profile_image: text;
   role: text;
   username: text;
 };
type CreateDesignationArgs = record {name: text;};
type CreateDepartmentArgs = record {name: text;};
type CanisterHttpResponsePayload = 
 record {
   body: vec nat8;
   headers: vec HttpHeader;
   status: nat;
 };
service : {
  cancelRecurringTimer: (nat) -> ();
  checkPayroll: () -> ();
  createAccount: (User) -> (Response_3);
  create_department: (CreateDepartmentArgs) -> (Response_8);
  create_designation: (CreateDesignationArgs) -> (Response_7);
  create_emp: (CreateEmpArgs) -> (Response_6);
  create_organization: (CreateOrganizationArgs) -> (Response_5);
  emailExists: (text) -> (bool) query;
  generateCode: (text) -> (text);
  generatePayslip: (nat) -> (Response_4);
  generateUUID: () -> (text);
  getCanisterAddress: () -> (text);
  getCanisterBalance: () -> (text);
  getDepartments: () -> (vec Department) query;
  getDepartmentsLength: () -> (text) query;
  getDesignations: () -> (vec Designation) query;
  getDesignationsLength: () -> (text) query;
  getEmployees: () -> (vec Emp);
  getFundingAddress: () -> (text);
  getFundingBalance: () -> (text);
  getLogs: () -> (vec text) query;
  getMyTransactionLength: () -> (text);
  getNotifications: () -> (vec Notification__1);
  getOrganizations: () -> (vec Organization) query;
  getOrganizationsLength: () -> (text) query;
  getPic: (ImgId) -> (blob) query;
  getTestTokens: () -> (Result);
  getThumbnail: (ImgId) -> (blob) query;
  getTradingAddress: () -> (text);
  getTradingBalance: () -> (text);
  getTransactionLength: () -> (text) query;
  getUnreadNotifications: () -> (vec Notification__1);
  getUnreadNotificationsLength: () -> (text);
  getUser: () -> (Response_3);
  getUserByPrincipal: (principal) -> (Response_3);
  getUsersList: () -> (vec record {
                             text;
                             User;
                           }) query;
  get_transaction: (GetTransactionArgs) -> (GetTransactionResult) query;
  get_transactions: () -> (vec Transaction) query;
  http_request: (Request) -> (Response__1) query;
  isReg: () -> (bool);
  isRegistered: () -> (bool);
  runpayroll: (vec PayrollType__1) -> (Response_2);
  save_notification: (CreateNotificationArgs) -> (CreateNotificationResult);
  save_payroll: (SchedulePaymentsArgs) -> (SchedulePaymentsResult);
  save_transaction: (CreateTransactionArgs) -> (CreateTransactionResult);
  schedulePayment: (nat) -> (nat);
  sendToOwner: (nat, text) -> (Response);
  send_notifications: (text, text, text, text, text) -> ();
  setCourierApiKey: (text) -> (Response_1);
  setRecurringTimer: (nat) -> (nat);
  transferFromCanistertoSubAccount: () -> (Result);
  transferFromSubAccountToSubAccount: (text, nat) -> (Response);
  transform: (TransformArgs) -> (CanisterHttpResponsePayload) query;
  uploadImg: (ImgId, blob) -> () oneway;
  uploadThumbnail: (ImgId, blob) -> () oneway;
  userLength: () -> (text);
  whoami: () -> (principal) query;
}
