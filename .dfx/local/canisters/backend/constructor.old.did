type User = 
 record {
   email_address: text;
   email_notifications: bool;
   name: text;
   phone_notifications: bool;
   phone_number: text;
 };
type Transaction__1 = 
 record {
   amount: nat;
   created_at: int;
   creator: principal;
   destination: principal;
   id: nat;
   successful: bool;
 };
type Transaction = 
 record {
   amount: nat;
   created_at: int;
   creator: principal;
   destination: principal;
   id: nat;
   successful: bool;
 };
type Subaccount = blob;
type Result = 
 variant {
   err: text;
   ok: text;
 };
type Response_4 = 
 record {
   data: opt Employee;
   error_text: opt text;
   status: nat16;
   status_text: text;
 };
type Response_3 = 
 record {
   data: opt vec PayrollType;
   error_text: opt text;
   status: nat16;
   status_text: text;
 };
type Response_2 = 
 record {
   data: opt text;
   error_text: opt text;
   status: nat16;
   status_text: text;
 };
type Response_1 = 
 record {
   data: opt Transaction;
   error_text: opt text;
   status: nat16;
   status_text: text;
 };
type Response = 
 record {
   data: opt User;
   error_text: opt text;
   status: nat16;
   status_text: text;
 };
type PayrollType = 
 record {
   amount: nat;
   created_at: int;
   creator: text;
   destination: text;
   id: nat;
   successful: bool;
 };
type Notification__1 = 
 record {
   amount: nat;
   id: nat;
   isRead: bool;
   receiver: text;
   sender: text;
 };
type Notification = 
 record {
   amount: nat;
   id: nat;
   isRead: bool;
   receiver: text;
   sender: text;
 };
type GetTransactionSuccess = record {transaction: Transaction__1;};
type GetTransactionResult = 
 variant {
   err: GetTransactionErr;
   ok: GetTransactionSuccess;
 };
type GetTransactionErr = 
 record {
   kind: variant {
           InvalidTransactionId;
           NotAuthorized;
           NotFound;
           Other;
         };
   message: opt text;
 };
type GetTransactionArgs = record {id: nat;};
type GetAccountIdentifierSuccess = record {
                                     accountIdentifier: AccountIdentifier;};
type GetAccountIdentifierResult = 
 variant {
   err: GetAccountIdentifierErr;
   ok: GetAccountIdentifierSuccess;
 };
type GetAccountIdentifierErr = record {message: opt text;};
type GetAccountIdentifierArgs = record {"principal": principal;};
type Employee = 
 record {
   created_at: int;
   creator: principal;
   email_address: text;
   id: nat;
   modified_at: int;
   name: text;
   phone_number: text;
   wallet: text;
 };
type CreateTransactionSuccess = record {transaction: Transaction__1;};
type CreateTransactionResult = 
 variant {
   err: CreateTransactionErr;
   ok: CreateTransactionSuccess;
 };
type CreateTransactionErr = 
 record {
   kind:
    variant {
      InsufficientBalance;
      InvalidAmount;
      InvalidDestination;
      InvalidDetails;
      InvalidSender;
      MaxTransactionsReached;
      Other;
    };
   message: opt text;
 };
type CreateTransactionArgs = 
 record {
   amount: nat;
   creator: principal;
   destination: principal;
   successful: bool;
 };
type CreateNotificationSuccess = record {notification: Notification;};
type CreateNotificationResult = 
 variant {
   err: CreateNotificationErr;
   ok: CreateNotificationSuccess;
 };
type CreateNotificationErr = 
 record {
   kind: variant {
           InvalidNotification;
           Other;
         };
   message: opt text;
 };
type CreateNotificationArgs = 
 record {
   amount: nat;
   isRead: bool;
   receiver: text;
   sender: text;
 };
type CreateEmployeeArgs = record {wallet: text;};
type AccountIdentifierToBlobSuccess = blob;
type AccountIdentifierToBlobResult = 
 variant {
   err: AccountIdentifierToBlobErr;
   ok: AccountIdentifierToBlobSuccess;
 };
type AccountIdentifierToBlobErr = 
 record {
   kind: variant {
           InvalidAccountIdentifier;
           Other;
         };
   message: opt text;
 };
type AccountIdentifier = 
 variant {
   "blob": blob;
   "principal": principal;
   "text": text;
 };
type Account = 
 record {
   owner: principal;
   subaccount: opt Subaccount;
 };
service : {
  accountIdentifierToBlob: (AccountIdentifier) ->
   (AccountIdentifierToBlobResult);
  create_employee: (CreateEmployeeArgs) -> (Response_4);
  getAddress: () -> (text);
  getCanisterAddress: () -> (text);
  getCanisterBalance: () -> (text);
  getFundingAddress: () -> (text);
  getFundingBalance: () -> (text);
  getInvoice: () -> (Account);
  getLogs: () -> (vec text) query;
  getMyContacts: () -> (vec Employee);
  getMyContactsLength: () -> (text);
  getMyTransactionLength: () -> (text);
  getNotifications: () -> (vec Notification__1);
  getTradingAddress: () -> (text);
  getTradingBalance: () -> (text);
  getTransactionLength: () -> (text) query;
  getUnreadNotifications: () -> (vec Notification__1);
  getUnreadNotificationsLength: () -> (text);
  getUser: () -> (Response) query;
  getUsersList: () -> (vec record {
                             text;
                             User;
                           }) query;
  get_account_identifier: (GetAccountIdentifierArgs) ->
   (GetAccountIdentifierResult) query;
  get_transaction: (GetTransactionArgs) -> (GetTransactionResult) query;
  get_transactions: () -> (vec Transaction) query;
  isRegistered: () -> (bool) query;
  runpayroll: (vec PayrollType) -> (Response_3);
  save_notification: (CreateNotificationArgs) -> (CreateNotificationResult);
  save_transaction: (CreateTransactionArgs) -> (CreateTransactionResult);
  setCourierApiKey: (text) -> (Response_2);
  testRandom: () -> (opt bool);
  transferFromCanistertoSubAccount: () -> (Result);
  transferFromSubAccountToCanister: (nat) -> (Result);
  transferFromSubAccountToSubAccount: (text, nat) -> (Response_1);
  updateUser: (User) -> (Response);
  userLength: () -> (text) query;
  whoami: () -> (principal);
}
