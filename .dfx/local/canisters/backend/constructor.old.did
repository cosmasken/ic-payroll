type User = 
 record {
   created_at: int;
   email: text;
   email_notifications: bool;
   name: text;
   phone: text;
   phone_notifications: bool;
   wallet: text;
 };
type Subaccount = blob;
type Result = 
 variant {
   err: text;
   ok: text;
 };
type Response_1 = 
 record {
   data: opt text;
   error_text: opt text;
   status: nat16;
   status_text: text;
 };
type Response = 
 record {
   data: opt User;
   error_text: opt text;
   status: nat16;
   status_text: text;
 };
type Account = 
 record {
   owner: principal;
   subaccount: opt Subaccount;
 };
service : {
  deleteUser: (text) -> (Response_1);
  getAddress: () -> (text);
  getCanisterAddress: () -> (text);
  getCanisterBalance: () -> (text);
  getFundingAddress: () -> (text);
  getFundingBalance: () -> (text);
  getInvoice: () -> (Account);
  getLogs: () -> (vec text) query;
  getTradingAddress: () -> (text);
  getTradingBalance: () -> (text);
  getUser: () -> (Response) query;
  getUsersList: () -> (vec record {
                             text;
                             User;
                           }) query;
  setCourierApiKey: (text) -> (Response_1);
  transactionsLength: () -> (text) query;
  transferFromCanistertoSubAccount: () -> (Result);
  transferFromSubAccountToCanister: (nat) -> (Result);
  transferFromSubAccountToSubAccount: (text, nat) -> (Result);
  updateUser: (User) -> (Response);
  userLength: () -> (text) query;
  whoami: () -> (principal);
}
