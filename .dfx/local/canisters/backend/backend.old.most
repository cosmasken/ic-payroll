// Version: 1.0.0
type AssocList<K, V> = List<(K, V)>;
type AssocList__1<K, V> = AssocList<K, V>;
type Branch<K, V> = {left : Trie<K, V>; right : Trie<K, V>; size : Nat};
type Hash = Nat32;
type Key__1<K> = {hash : Hash; key : K};
type Leaf<K, V> = {keyvals : AssocList__1<Key__1<K>, V>; size : Nat};
type List<T> = ?(T, List<T>);
type Trie<K, V> = {#branch : Branch<K, V>; #empty; #leaf : Leaf<K, V>};
type User =
  {
    email_address : Text;
    email_notifications : Bool;
    name : Text;
    phone_notifications : Bool;
    phone_number : Text
  };
type User__1 = User;
actor {
  stable var courierApiKey : Text;
  stable var latestTransactionIndex : Nat;
  stable var userStore :
    {#branch : Branch<Text, User__1>; #empty; #leaf : Leaf<Text, User__1>}
};
