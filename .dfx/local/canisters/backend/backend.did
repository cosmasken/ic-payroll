type User = 
 record {
   email_address: text;
   email_notifications: bool;
   name: text;
   phone_notifications: bool;
   phone_number: text;
 };
type Transaction__1 = 
 record {
   amount: nat;
   creator: principal;
   destination: principal;
   id: nat;
   successful: bool;
 };
type Transaction = 
 record {
   amount: nat;
   creator: principal;
   destination: principal;
   id: nat;
   successful: bool;
 };
type Subaccount = blob;
type Result = 
 variant {
   err: text;
   ok: text;
 };
type Response_2 = 
 record {
   data: opt text;
   error_text: opt text;
   status: nat16;
   status_text: text;
 };
type Response_1 = 
 record {
   data: opt Transaction;
   error_text: opt text;
   status: nat16;
   status_text: text;
 };
type Response = 
 record {
   data: opt User;
   error_text: opt text;
   status: nat16;
   status_text: text;
 };
type GetTransactionSuccess = record {transaction: Transaction__1;};
type GetTransactionResult = 
 variant {
   err: GetTransactionErr;
   ok: GetTransactionSuccess;
 };
type GetTransactionErr = 
 record {
   kind: variant {
           InvalidTransactionId;
           NotAuthorized;
           NotFound;
           Other;
         };
   message: opt text;
 };
type GetTransactionArgs = record {id: nat;};
type GetAccountIdentifierSuccess = record {
                                     accountIdentifier: AccountIdentifier;};
type GetAccountIdentifierResult = 
 variant {
   err: GetAccountIdentifierErr;
   ok: GetAccountIdentifierSuccess;
 };
type GetAccountIdentifierErr = record {message: opt text;};
type GetAccountIdentifierArgs = record {"principal": principal;};
type CreateTransactionSuccess = record {transaction: Transaction__1;};
type CreateTransactionResult = 
 variant {
   err: CreateTransactionErr;
   ok: CreateTransactionSuccess;
 };
type CreateTransactionErr = 
 record {
   kind:
    variant {
      InsufficientBalance;
      InvalidAmount;
      InvalidDestination;
      InvalidDetails;
      InvalidSender;
      MaxTransactionsReached;
      Other;
    };
   message: opt text;
 };
type CreateTransactionArgs = 
 record {
   amount: nat;
   creator: principal;
   destination: principal;
   successful: bool;
 };
type Backend = 
 service {
   accountIdentifierToBlob: (AccountIdentifier) ->
    (AccountIdentifierToBlobResult);
   getAddress: () -> (text);
   getCanisterAddress: () -> (text);
   getCanisterBalance: () -> (text);
   getFundingAddress: () -> (text);
   getFundingBalance: () -> (text);
   getInvoice: () -> (Account);
   /// * Get latest log items. Log output is capped at 100 items.
   getLogs: () -> (vec text) query;
   getTradingAddress: () -> (text);
   getTradingBalance: () -> (text);
   /// * High-Level API
   /// *  Get the merchant's information
   getUser: () -> (Response) query;
   getUsersList: () -> (vec record {
                              text;
                              User;
                            }) query;
   get_account_identifier: (GetAccountIdentifierArgs) ->
    (GetAccountIdentifierResult) query;
   get_transaction: (GetTransactionArgs) -> (GetTransactionResult) query;
   get_transactions: () -> (vec Transaction) query;
   save_transaction: (CreateTransactionArgs) -> (CreateTransactionResult);
   /// * Set the courier API key. Only the owner can set the courier API key.
   setCourierApiKey: (text) -> (Response_2);
   transferFromCanistertoSubAccount: () -> (Result);
   transferFromSubAccountToCanister: (nat) -> (Result);
   transferFromSubAccountToSubAccount: (text, nat) -> (Response_1);
   /// * Update the merchant's information
   updateUser: (User) -> (Response);
   /// *  Check if user exists and return Bool
   userExists: () -> (bool) query;
   userLength: () -> (text) query;
   whoami: () -> (principal);
 };
type AccountIdentifierToBlobSuccess = blob;
type AccountIdentifierToBlobResult = 
 variant {
   err: AccountIdentifierToBlobErr;
   ok: AccountIdentifierToBlobSuccess;
 };
type AccountIdentifierToBlobErr = 
 record {
   kind: variant {
           InvalidAccountIdentifier;
           Other;
         };
   message: opt text;
 };
type AccountIdentifier = 
 variant {
   "blob": blob;
   "principal": principal;
   "text": text;
 };
type Account = 
 record {
   owner: principal;
   subaccount: opt Subaccount;
 };
service : (nat) -> Backend
