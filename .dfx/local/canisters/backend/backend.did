type User = 
 record {
   email_address: text;
   email_notifications: bool;
   first_name: text;
   last_name: text;
   phone_notifications: bool;
   phone_number: text;
 };
type TransformArgs = 
 record {
   context: blob;
   response: HttpResponsePayload;
 };
type Transaction__1 = 
 record {
   amount: nat;
   created_at: int;
   creator: principal;
   destination: principal;
   id: nat;
   successful: bool;
 };
type Transaction = 
 record {
   amount: nat;
   created_at: int;
   creator: principal;
   destination: principal;
   id: nat;
   successful: bool;
 };
type Subaccount = blob;
type SchedulePaymentsSuccess = record {receivers: vec PayrollType;};
type SchedulePaymentsResult = 
 variant {
   err: SchedulePaymentsErr;
   ok: SchedulePaymentsSuccess;
 };
type SchedulePaymentsErr = 
 record {
   kind:
    variant {
      InsufficientBalance;
      InvalidAmount;
      InvalidDestination;
      InvalidDetails;
      InvalidSender;
      MaxTransactionsReached;
      Other;
    };
   message: opt text;
 };
type SchedulePaymentsArgs = 
 record {
   created_at: int;
   payment_at: int;
   receivers: vec PayrollType;
   status: variant {
             Accepted;
             Paid;
             Rejected;
             Unpaid;
           };
 };
type Result = 
 variant {
   err: text;
   ok: text;
 };
type Response_9 = 
 record {
   data: opt Designation;
   error_text: opt text;
   status: nat16;
   status_text: text;
 };
type Response_8 = 
 record {
   data: opt Organization;
   error_text: opt text;
   status: nat16;
   status_text: text;
 };
type Response_7 = 
 record {
   data: opt Payslip;
   error_text: opt text;
   status: nat16;
   status_text: text;
 };
type Response_6 = 
 record {
   data: opt Emp;
   error_text: opt text;
   status: nat16;
   status_text: text;
 };
type Response_5 = 
 record {
   data: opt PayslipData;
   error_text: opt text;
   status: nat16;
   status_text: text;
 };
type Response_4 = 
 record {
   data: opt Employee;
   error_text: opt text;
   status: nat16;
   status_text: text;
 };
type Response_3 = 
 record {
   data: opt vec PayrollType__1;
   error_text: opt text;
   status: nat16;
   status_text: text;
 };
type Response_2 = 
 record {
   data: opt text;
   error_text: opt text;
   status: nat16;
   status_text: text;
 };
type Response_10 = 
 record {
   data: opt Department;
   error_text: opt text;
   status: nat16;
   status_text: text;
 };
type Response_1 = 
 record {
   data: opt Transaction;
   error_text: opt text;
   status: nat16;
   status_text: text;
 };
type Response = 
 record {
   data: opt User;
   error_text: opt text;
   status: nat16;
   status_text: text;
 };
type Permissions = 
 record {
   canAdd: bool;
   canDelete: bool;
   canEdit: bool;
   canPay: bool;
   canUpdate: bool;
   canView: bool;
 };
type PayslipData = 
 record {
   department: text;
   designation: text;
   gross_salary: nat;
   housing: nat;
   name: text;
   net_salary: nat;
   nhif_deductions: nat;
   nssf_deductions: nat;
   organization: text;
   other_deductions: nat;
   paye: nat;
   personal_relief: nat;
   taxable_income: nat;
   total_tax: nat;
 };
type Payslip = 
 record {
   gross_salary: nat;
   housing: nat;
   net_salary: nat;
   nhif_deductions: nat;
   nssf_deductions: nat;
   other_deductions: nat;
   paye: nat;
   personal_relief: nat;
   taxable_income: nat;
   total_tax: nat;
 };
type PayrollType__1 = 
 record {
   amount: nat;
   created_at: int;
   creator: text;
   destination: text;
   id: nat;
   successful: bool;
 };
type PayrollType = 
 record {
   amount: nat;
   created_at: int;
   creator: text;
   destination: text;
   id: nat;
   successful: bool;
 };
type Organization = 
 record {
   code: text;
   creator: principal;
   name: text;
 };
type Notification__1 = 
 record {
   amount: nat;
   id: nat;
   isRead: bool;
   receiver: text;
   sender: text;
 };
type Notification = 
 record {
   amount: nat;
   id: nat;
   isRead: bool;
   receiver: text;
   sender: text;
 };
type HttpResponsePayload = 
 record {
   body: vec nat8;
   headers: vec HttpHeader;
   status: nat;
 };
type HttpHeader = 
 record {
   name: text;
   value: text;
 };
type GetTransactionSuccess = record {transaction: Transaction__1;};
type GetTransactionResult = 
 variant {
   err: GetTransactionErr;
   ok: GetTransactionSuccess;
 };
type GetTransactionErr = 
 record {
   kind: variant {
           InvalidTransactionId;
           NotAuthorized;
           NotFound;
           Other;
         };
   message: opt text;
 };
type GetTransactionArgs = record {id: nat;};
type Employee = 
 record {
   access_type: text;
   created_at: int;
   creator: principal;
   email_address: text;
   emp_type: text;
   id: nat;
   modified_at: int;
   name: text;
   phone_number: text;
   wallet: text;
 };
type Emp = 
 record {
   creator: principal;
   department: text;
   designation: text;
   disability: bool;
   email_address: text;
   employee_type: text;
   first_name: text;
   gender: text;
   gross_salary: text;
   identity: text;
   job_group: text;
   joining_date: text;
   last_name: text;
   organization: text;
   permissions: opt Permissions;
   phone_number: text;
   role: text;
 };
type Designation = 
 record {
   code: text;
   creator: principal;
   name: text;
 };
type Department = 
 record {
   code: text;
   creator: principal;
   name: text;
 };
type CreateTransactionSuccess = record {transaction: Transaction__1;};
type CreateTransactionResult = 
 variant {
   err: CreateTransactionErr;
   ok: CreateTransactionSuccess;
 };
type CreateTransactionErr = 
 record {
   kind:
    variant {
      InsufficientBalance;
      InvalidAmount;
      InvalidDestination;
      InvalidDetails;
      InvalidSender;
      MaxTransactionsReached;
      Other;
    };
   message: opt text;
 };
type CreateTransactionArgs = 
 record {
   amount: nat;
   creator: principal;
   destination: principal;
   successful: bool;
 };
type CreateOrganizationArgs = 
 record {
   code: text;
   name: text;
 };
type CreateNotificationSuccess = record {notification: Notification;};
type CreateNotificationResult = 
 variant {
   err: CreateNotificationErr;
   ok: CreateNotificationSuccess;
 };
type CreateNotificationErr = 
 record {
   kind: variant {
           InvalidNotification;
           Other;
         };
   message: opt text;
 };
type CreateNotificationArgs = 
 record {
   amount: nat;
   isRead: bool;
   receiver: text;
   sender: text;
 };
type CreateEmployeeArgs = 
 record {
   access_type: text;
   emp_type: text;
   wallet: text;
 };
type CreateEmpArgs = 
 record {
   department: text;
   designation: text;
   disability: bool;
   email_address: text;
   employee_type: text;
   first_name: text;
   gender: text;
   gross_salary: text;
   identity: text;
   job_group: text;
   joining_date: text;
   last_name: text;
   organization: text;
   phone_number: text;
   role: text;
 };
type CreateDesignationArgs = 
 record {
   code: text;
   name: text;
 };
type CreateDepartmentArgs = 
 record {
   code: text;
   name: text;
 };
type CanisterHttpResponsePayload = 
 record {
   body: vec nat8;
   headers: vec HttpHeader;
   status: nat;
 };
type Backend = 
 service {
   addToMetamaskUsers: (text, principal) -> (Result);
   cancelRecurringTimer: (nat) -> ();
   checkPayroll: () -> ();
   create_department: (CreateDepartmentArgs) -> (Response_10);
   create_designation: (CreateDesignationArgs) -> (Response_9);
   create_emp: (CreateEmpArgs) -> (Response_6);
   create_employee: (CreateEmployeeArgs) -> (Response_4);
   create_organization: (CreateOrganizationArgs) -> (Response_8);
   emailExists: (text) -> (bool) query;
   generatePayslip: (text) -> (Response_7);
   getAddress: () -> (text);
   getCanisterAddress: () -> (text);
   getCanisterBalance: () -> (text);
   getDepartments: () -> (vec Department) query;
   getDepartmentsLength: () -> (text) query;
   getDesignations: () -> (vec Designation) query;
   getDesignationsLength: () -> (text) query;
   getEmpByPrincipal: (principal) -> (Response_6);
   getEmployeeByPrincipal: (principal) -> (Response_4);
   getEmployees: () -> (vec Emp);
   getFundingAddress: () -> (text);
   getFundingBalance: () -> (text);
   getInvoice: () -> (Account);
   /// * Get latest log items. Log output is capped at 100 items.
   getLogs: () -> (vec text) query;
   getMetamaskUsers: () -> (vec record {
                                  text;
                                  principal;
                                });
   getMyContacts: () -> (vec Employee);
   getMyContactsLength: () -> (text);
   getMyTransactionLength: () -> (text);
   getNotifications: () -> (vec Notification__1);
   getOrganizations: () -> (vec Organization) query;
   getOrganizationsLength: () -> (text) query;
   getTradingAddress: () -> (text);
   getTradingBalance: () -> (text);
   getTransactionLength: () -> (text) query;
   getUnreadNotifications: () -> (vec Notification__1);
   getUnreadNotificationsLength: () -> (text);
   /// *  Get the merchant's information
   getUser: () -> (Response) query;
   /// *  Get user data by principal
   getUserByPrincipal: (principal) -> (Response) query;
   getUserPayslip: (text) -> (Response_5);
   getUsersList: () -> (vec record {
                              text;
                              User;
                            }) query;
   get_transaction: (GetTransactionArgs) -> (GetTransactionResult) query;
   get_transactions: () -> (vec Transaction) query;
   /// *  Check if user exists and return Bool
   isRegistered: () -> (bool) query;
   linkAccount: () -> ();
   mapPrincipal: (text) -> (principal);
   remove_employee: (text) -> (Response_4);
   runpayroll: (vec PayrollType__1) -> (Response_3);
   save_notification: (CreateNotificationArgs) -> (CreateNotificationResult);
   save_payroll: (SchedulePaymentsArgs) -> (SchedulePaymentsResult);
   save_transaction: (CreateTransactionArgs) -> (CreateTransactionResult);
   sendToOwner: (nat, text) -> (Result);
   send_notifications: (text, text, text, text, text) -> ();
   /// * Set the courier API key. Only the owner can set the courier API key.
   setCourierApiKey: (text) -> (Response_2);
   setRecurringTimer: (nat) -> (nat);
   transferFromCanistertoSubAccount: () -> (Result);
   transferFromSubAccountToSubAccount: (text, nat) -> (Response_1);
   transform: (TransformArgs) -> (CanisterHttpResponsePayload) query;
   /// * Update the user's information
   updateUser: (User) -> (Response);
   userLength: () -> (text) query;
   whoami: () -> (principal) query;
 };
type Account = 
 record {
   owner: principal;
   subaccount: opt Subaccount;
 };
service : (nat) -> Backend
